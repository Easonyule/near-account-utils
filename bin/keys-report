#!/usr/bin/env node

/*

What is this?
-------------

Generate a report of account keys on the NEAR network by scanning ~/.near-credentials for all
files ending in .json

Optionally specify the network or use Testnet by default
`export NEAR_ENV=<network>`

  Usage:

  yarn keys

  

Sample Report
-------------


  Access Keys Report (for testnet)

╔════════════════════════════════╤══════════════════╤══════════════════════════════════════════╤═══════╤══════════════════╗
║                        account │       public key │ type                                     │ nonce │           status ║
╟────────────────────────────────┼──────────────────┼──────────────────────────────────────────┼───────┼──────────────────╢
║       contract1.a_user.testnet │   ed25519:AiozBb │ FullAccess                               │   1   │            Local ║
╟────────────────────────────────┼──────────────────┼──────────────────────────────────────────┼───────┼──────────────────╢
║                 a_user.testnet │   ed25519:Fk91Nw │ FullAccess                               │   3   │            Local ║
║                                │   ed25519:22WrPY │ FullAccess                               │   0   │        Not Found ║
║                                │   ed25519:Doqp9g │ FunctionCall ( dev-1588779149087 )       │   2   │        Not Found ║
╟────────────────────────────────┼──────────────────┼──────────────────────────────────────────┼───────┼──────────────────╢
║               demo_app.testnet │   ed25519:7ifwfQ │ FullAccess                               │   1   │            Local ║
╟────────────────────────────────┼──────────────────┼──────────────────────────────────────────┼───────┼──────────────────╢
║ contract1.another_user.testnet │   ed25519:2CrU9K │ FullAccess                               │   1   │            Local ║
╚════════════════════════════════╧══════════════════╧══════════════════════════════════════════╧═══════╧══════════════════╝

  Errors

╔════════════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════╗
║       contract.no_user.testnet │ account not found on [ testnet ]                                                       ║
╟────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────────────╢
║                no_user.testnet │ account not found on [ testnet ]                                                       ║
╚════════════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════╝

*/

const path = require("path");

const { table, createStream } = require("table");
const chalk = require("chalk");

const home = require("os").homedir();
const credentials = path.resolve(home, ".near-credentials");

const {
  fetchAccounts,
  fetchAccessKeys,
  publicKeyFromFile,
} = require("../lib/utils");

(async () => {
  const network = process.env.NEAR_ENV || "testnet";
  const localAccounts = await fetchAccounts(credentials, network);

  console.log(chalk`
  {bold Access Keys Report} ( for ${network} )
  `);

  let errors = [];
  let errorsReport = prepareErrorReport();
  let data = ["account", "public key", "type", "nonce", "status"].map((el) =>
    chalk.bold(el)
  );

  let keysReport = prepareKeysReport();
  keysReport.write(data);

  for (const account of Object.keys(localAccounts)) {
    try {
      const localKey = publicKeyFromFile(localAccounts[account]);
      let keys = await fetchAccessKeys(account);

      let pks = []
      let types = []
      let nonces = []
      let statuses = []

      if(keys.length > 0) {
        pks = keys.map((key) => key.public_key.slice(0, 14));

        types = keys.map((entry) => {
          let key = entry.access_key.permission;
          switch (typeof key) {
            case "string":
              return chalk`{yellow.bold ${key}}`;

            case "object":
              let type = Object.keys(key);
              let details = Object.values(key)[0];
              return chalk`{cyan.bold ${type}} ( ${details.receiver_id} )`;

            default:
              throw new Error(`Unrecognized key type:[ ${key} ]`);
          }
        });

        nonces = keys.map((entry) => entry.access_key.nonce);

        keys = keys.map(key => key.public_key)

        statuses = keys.map((pk) =>
          pk == localKey
            ? chalk`{green.bold Local}`
            : chalk`{red.bold Not Found}`
        );

        statuses = keys.map((pk) =>
          pk == localKey ? chalk`{green.bold Local}` : chalk`{red.bold Not Found}`
        )

        if (!keys.includes(localKey)) {
          pks.push(localKey.slice(0, 14))
          types.push(chalk`{cyan.bold Unknown}`)
          nonces.push(chalk`{cyan.bold -}`)
          statuses.push(chalk`{cyan.bold Local}`)
        }

      } else {
        pks = [chalk`{cyan.bold No Public Keys}`]
        types.push(chalk`{cyan.bold -}`)
        nonces.push(chalk`{cyan.bold -}`)
        statuses.push(chalk`{cyan.bold -}`)
      }

      data = [];
      data.push(account);
      data.push(pks.join("\n"));
      data.push(types.join("\n"));
      data.push(nonces.join("\n"));
      data.push(statuses.join("\n"));

      keysReport.write(data);
    } catch (error) {
      if (/does not exist while viewing/.test(error)) {
        errors.push([
          account,
          chalk`account {bold.red not found} on [ {bold ${network}} ]`,
        ]);
      } else {
        console.log(error);
      }
    }
  }

  if (errors.length > 0) {
    console.log(chalk`

  {bold.red Errors}
  `);
    console.log(errorsReport(errors));
  }

  console.log() // finish the report stream
})();

function prepareErrorReport() {
  return (data) => {
    return table(data, {
      columnCount: 2,
      columns: {
        0: { width: 30, alignment: 'right' },
        1: { width: 79, alignment: 'left' },
      },
    });
  };
}

function prepareKeysReport() {
  return createStream({
    columnDefault: { width: 16 },
    columnCount: 5,
    columns: {
      0: { width: 30, alignment: 'right' },
      1: { alignment: 'right' },
      2: { width: 35, alignment: 'left' },
      3: { width: 9, alignment: 'center' },
      4: { width: 10,alignment: 'right' },
    },
  });
}
